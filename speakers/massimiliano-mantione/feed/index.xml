<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Massimiliano Mantione &#8211; jsDay 2014</title>
	<atom:link href="/speakers/massimiliano-mantione/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>The international Javascript Conference</description>
	<lastBuildDate>Tue, 13 May 2014 21:24:59 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.2</generator>
	<item>
		<title>Javascript, metaprogramming, and you</title>
		<link>/talk/javascript-metaprogramming-and-you/</link>
		<pubDate>Wed, 23 Apr 2014 20:11:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=333</guid>
		<description><![CDATA[We all know that Javascript is powerful but it can be a really terrible language when misused. Moreover, it lacks several advanced features that are taken forgranted in other languages.One technique that is always overlooked is metaprogramming: hystorically only lisp dialects support it properly, and programmers regularly underestimate its power.In the spirit of Coffeescript, Typescript, Clojurescript and other similar projects [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span style="color: #222222;">We all know that Javascript is powerful but it can be a really </span><span style="color: #222222;">terrible language when misused. </span><span style="color: #222222;">Moreover, it lacks several advanced features that are taken for</span><br style="color: #222222;" /><span style="color: #222222;">granted in other languages.</span><br style="color: #222222;" /><br style="color: #222222;" /><span style="color: #222222;">One technique that is always overlooked is metaprogramming: </span><span style="color: #222222;">hystorically only lisp dialects support it properly, and programmers </span><span style="color: #222222;">regularly underestimate its power.</span><br style="color: #222222;" /><br style="color: #222222;" /><span style="color: #222222;">In the spirit of Coffeescript, Typescript, Clojurescript and other </span><span style="color: #222222;">similar projects I have developed Metascript, which is designed to </span><span style="color: #222222;">provide everything those languages offer, and then some, with a strong </span><span style="color: #222222;">emphasis on metaprogramming.</span><br style="color: #222222;" /><br style="color: #222222;" /><span style="color: #222222;">We’ll have a quick tour of the language and see how it solves a lot of </span><span style="color: #222222;">the problems that we need to deal with every day when writing code.</span></p>
]]></content:encoded>
			</item>
		<item>
		<title>Monads, Promises, and Reactive Metaprogramming</title>
		<link>/talk/monads-promises-and-reactive-metaprogramming/</link>
		<pubDate>Wed, 26 Mar 2014 08:56:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">/?post_type=talk&#038;p=304</guid>
		<description><![CDATA[Prerequisites: having followed Federico Galassi&#8217;s or Sergi Mansilla&#8217;s talk (either is fine), or just having an idea on what rx.js does. Javascript programmers are often struggling with asynchronous control flows. It does not matter if the sources of time warping are AJAX requests, the nodejs event loop, or a simple flow of events from the DOM: the result regularly [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><span style="color: #222222;"><strong>Prerequisites</strong>: having followed Federico Galassi&#8217;s or Sergi Mansilla&#8217;s </span><span style="color: #222222;">talk (either is fine), or just having an idea on what rx.js does.</span></p>
<p><span style="color: #222222;">Javascript programmers are often struggling with asynchronous control </span><span style="color: #222222;">flows. It does not matter if the sources of time warping are AJAX </span><span style="color: #222222;">requests, the nodejs event loop, or a simple flow of events from the </span><span style="color: #222222;">DOM: the result regularly converges to callback hell.</span><br style="color: #222222;" /><br style="color: #222222;" /><span style="color: #222222;">There are a lot of libraries and frameworks that try to address this </span><span style="color: #222222;">problem now. If we don&#8217;t like them (and have time to waste) we can </span><span style="color: #222222;">always wait for the ECMA committee and the browser vendors to do their </span><span style="color: #222222;">job, adding proper async support to the language in the future.</span><br style="color: #222222;" /><br style="color: #222222;" /><span style="color: #222222;">We will see how monadic sequencing is at the root of most of those </span><span style="color: #222222;">frameworks, and how a language with a programmable syntax can make </span><span style="color: #222222;">your code cleaner now, without waiting for ES6 generators or ES7 async </span><span style="color: #222222;">functions.</span></p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: 2014.jsday.it @ 2017-02-13 22:27:50 by W3 Total Cache -->